6.2 创建对象
	创建对象的方式：
	1.工厂模式 
		原理: 在函数内部创建对象并返回。
		缺点： 不知道对象的具体类型

	2.构造函数模式 this, new Function(),
		原理：在函数内部使用this操作符，调用时使用new()。 *new的过程！
		优点：解决了对象的类型问题
		缺点：每个方法都要在每个实例上重新创建一遍。对象的方法不是同一个实例

	3.原型模式（prototype）
		每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。
		调用构造函数而创建的那个对象实例的原型对象。
		

6.2.4 组合使用构造函数模式和原型模式
	将私有属性写在构造函数里面，共有的属性写在prototype里面。

6.2.5动态原型模式
	将所有信息封装在构造函数中，在构造函数中初始化原型。

6.2.6 寄生构造函数模式
	与工厂模式一样

6.2.7 稳妥构造函数
	与寄生构造函数类似，但创建对象的实力方法中不使用this对象，并且不使用new创建操作符调用构造函数。构造函数中，返回一个对象。



6.3 继承
	1.原型链
		引用类型值的原型，会被所有实例共享。
	2.借用构造函数
		在子类型构造函数的内部调用超类型构造函数。函数在特定环境中执行代码的对象，所以要通过apply和call方法。

	3.组合继承
		将原型链和借用构造函数的技术组合到一块儿。使用原型链实现对原型属性和方法的继承。通过构造函数实现对实例属性的继承。通过在原型上定义方法实现了函数服用，又保证每个实例都有它自己的属性。

	4.原型式继承

	5.寄生式继承




第7章 函数表达式
函数声明： function fn(){}
函数表达式： var aa = function(){};